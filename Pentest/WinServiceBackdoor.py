import servicemanager, win32serviceutil, win32service, win32api, os, ctypes


class Service(win32serviceutil.ServiceFramework):
	_svc_name = "ScsiService"
	_svc_display_name = "ScsiService"


	def __init__(self, *args):
		win32serviceutil.ServiceFramework.__init__(self,*args)

	def sleep(self,sec):
		win32api.Sleep(sec*1000, True)

	def SvcDoRun(self):
		self.ReportServiceStatus(win32service.SERVICE_START_PENDING)
		try: 
			self.ReportServiceStatus(win32service.SERVICE_RUNNING)
			self.start()
		except Exception, e:
			self.SvcStop()
	def SvcStop(self):
		self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
		self.stop()
		self.ReportServiceStatus(win32service.SERVICE_STOPPED)

	def start(self):

		self.runflag=True
		#Testing the privilige level
		fd = open('C:\Users\nonadmin\Desktop\test.txt', 'w')
		if ctypes.windll.shell32.IsUserAnAdmin == 0:
			fd.write('[-]Not Admin !!')
		else:
			fd.write('[+]Admin Priviliges :-)')

if __name__ == '__main__':
	servicemanager.Initialize()
	servicemanager.PrepareToHostSingle(Service)
	servicemanager.StartServiceCtrlDispatcher()
	servicemanager.HandleCommandLine(Service)
