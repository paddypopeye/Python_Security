import servicmanger, win32serviceutil, win32service, win32api, os, ctypes

class Service(win32serviceutil.ServiceFramework):

	def __init__(self,*args):
		win32serviceutil.ServiceFramework.__init__(self,*args)

	def sleep(self, sec):
		win32serviceutil.Sleep(sec*1000, True)

	def doSvcRun(self):
		self.ReportServiceStatuS(win32service.SERVICE_START_PENDING)
		try:
			self.ReportServiceStatuS(win32service.SERVICE_RUNNING)
			self.svcStart()
		except Exception, e:
			self.svcStop()

	def svcStop(self):
		self.ReportServiceStatuS(win32service.SERVICE_STOP_PENDING)
		self.stop()
		self.ReportServiceStatuS(win32service.SERVICE_STOPPED)

	def start(self):
		self.runflag=True
		while self.runflag:
			self.sleep(10)

		fd = open('C:\Users\nonadmin\Desktop\Test.txt', 'w')
		if fd.windll.shell32.IsAdminUser() == 0:
			print '[-]No Admin Priviliges'
		else:
			print'[+] Admin Priviliges obtained :-)'

	def stop(self):
		self.runflag = False	


if __name__ == '__main__':

	servicmanger.Intitilaize()
	servicmanger.PrepareToHostSingle()
	servicmanger.StartServiceCtrlDispatcher()
	servicmanger.HandleCommandLine(Service)